use std::collections::BTreeMap;

use specta::{
    export::get_types,
    ts::{self, ExportConfig},
    DataType, TypeMap,
};

use crate::service::{RouteType, Service};

pub fn generate_typescript<Ctx>(conf: &ExportConfig, service: &Service<Ctx>) -> String
where
    Ctx: Send + Sync + 'static,
{
    let mut out =
        format!("// This file has been generated by Hyperschema, using Specta. DO NOT EDIT.\n\n");

    let type_map = &service.type_map;
    for (_, typ) in type_map.iter() {
        out += &specta::ts::export_named_datatype(conf, typ, type_map).unwrap();
        out += "\n\n";
    }

    service.queries.iter().for_each(|(_, route)| {
        out += &route_type_to_ts(conf, type_map, &route.ty);
        out += "\n\n";
    });
    out
}

fn route_type_to_ts(conf: &ExportConfig, type_map: &TypeMap, route_type: &RouteType) -> String {
    match route_type {
        RouteType::Query(arg, res) => {
            format!(
                "export type Query<Arg = {}, Res = {}> = (arg: Arg) => Promise<Res>;",
                ts::datatype(conf, arg, type_map).unwrap(),
                ts::datatype(conf, res, type_map).unwrap()
            )
        }
    }
}
